[["index.html", "Boosting methods: Theory and application in R Chapter 1 Prerequisites", " Boosting methods: Theory and application in R Emanuel Sommer 2021-04-30 Chapter 1 Prerequisites The reader should have some basic knowledge of the following topics: Statistical learning Train/ test split Cross-validation Overfitting Gradient descent Bias variance trade-off Hyperparameters Regression trees and random forest models Basic R knowledge (only for the applied part) "],["intro.html", "Chapter 2 Introduction", " Chapter 2 Introduction This bookdown project shows my work for the main masters seminar from my M.Sc. Mathematics in Data Science at the TUM. The topic of the seminar is Statistical Methods and Models. During the seminar I was supervised by Prof. Claudia Czado and Ã–zge Sahin. My topic and thus covered in this project are boosting methods. Those are unarguably one of the hottest machine learning algorithms for tabular data to date. Boosting is one of the most powerful learning ideas introduced in the last twenty years. [1] Hereby the focus will lie on the regression and not the more often discussed classification setting. The main idea of boosting is to sequentially build models from some class of base learners to finally combine them to a powerful ensemble model. As the base learners regression trees will be chosen in this project. The next chapter will cover the theory behind boosting and especially tree-based gradient boosting. Besides a very prominent, efficient and successful implementation of tree-based gradient boosting namely XGBoost will be discussed in this chapter. It gained a lot of attention when it was integral to many winning submissions in machine learning competitions on the platform Kaggle and comes with some interesting tweaks to the general algorithm. The application of the discussed boosting models to two real world data sets with the use of the programming language R are the content of the subsequent chapters. This will be divided into exploratory data analysis and the modeling itself. Notably the framework of tidymodels is used in the practical part. "],["theory.html", "Chapter 3 Theory 3.1 The powerful idea of gradient boosting 3.2 General gradient tree boosting 3.3 XGBoost a highly efficient implementation", " Chapter 3 Theory 3.1 The powerful idea of gradient boosting As roughly mentioned in the introduction section 2 the main idea of boosting is to sequentially build weak learners that form a powerful ensemble model. With weak learners models with high bias and low variance are meant that perform at least a little better than guessing. This already shows that the sequential approach of gradient boosting with weak learners stands in strong contrast to bagged ensembles like random forest. There many models with low bias and high variance are fitted in a parallel fashion and the variance is then reduced by averaging over the models.[2] It is not totally clear from which field boosting methods emerged but some claim that the work of Freund and Schapire with respect to PAC learning in the 1990s were instrumental for their growth.[1] PAC learning can be considered one field within the broader field of learning theory that tries to find generalization bounds for algorithms that are probably approximately correct (PAC).[3] This section will first cover the general setup of gradient boosting as the most prominent method to train forward stagewise additive models. Secondly tree-based gradient boosting and finally a very efficient and robust tree-based gradient boosting algorithm namely XGBoost will be discussed in detail. 3.1.1 Forward Stagewise Additive Modeling In the setting of the dataset \\(\\mathcal{D} = \\{(y_i,x_i)\\ | i \\in [N]\\}\\) with predictors \\(x_i \\in \\mathbb{R}^m\\) and target \\(y_i \\in \\mathbb{R}\\) boosting is fitting the following additive, still quite general, model. \\[\\begin{equation} \\hat{y_i} = \\phi(x_i) = \\sum_{k=1}^{K} f_k(x_i), \\quad f_k \\in \\mathcal{F} \\tag{3.1} \\end{equation}\\] Where \\(\\mathcal{F}\\) is the space of learning algorithms that will be narrowed down later on. Additive expansions like this are at the core of many other powerful machine learning algorithms like Neural Networks or Wavelets.[1] The formulation (3.1) leads to so called forward stagewise additive modeling which basically means that one sequentially adds \\(f \\in \\mathcal{F}\\) to the current model \\(\\phi_k\\) without changing anything about the previous models.[1] The algorithm is shown below. Algorithm 1: Forward Stagewise Additive Modeling [1] Initialize \\(\\phi_0(x) = 0\\) For \\(k = 1\\) to \\(K\\) do: \\((\\beta_k,\\gamma_k) = argmin_{\\beta,\\gamma}\\sum_{i=1}^N L(y_i,\\phi_{k-1}(x_i) + \\beta f(x_i,\\gamma))\\) \\(\\phi_k(x) = \\phi_{k-1}(x) + \\beta_k f(x, \\gamma_k)\\) Where \\(\\gamma\\) parameterizes the learner \\(f \\in \\mathcal{F}\\) and the \\(\\beta_k\\) are the expansion coefficients. \\(L\\) should be a differentiable loss function. For example for the basic \\(L_2\\) loss the expression to be minimized simplifies to the following: \\[ L_2(y_i,\\phi_{k-1}(x_i) + \\beta f(x_i,\\gamma)) = (y_i - \\phi_{k-1}(x_i) - \\beta f(x_i,\\gamma))^2 \\] As \\(y_i - \\phi_{k-1}(x_i)\\) is just the residual of the previous model, the next model that is added corresponds to the model that best approximates the residuals of the current model. Although the \\(L_2\\) loss has many very nice properties like the above, it lacks robustness against outliers. Therefore two alternative losses for boosting in the regression setting are worth considering. 3.1.2 Robust loss functions for regression As the \\(L_2\\) loss squares the residuals, observations with large absolute residuals are overly important in the minimization step. This effect can be reduced intuitively by just using the \\(L_1\\) loss i.e. minimize over the sum over just the absolute residuals. To do this is indeed a valid approach and can reduce the influence of outliers greatly and thus make the final model more robust. Another good choice could be the Huber loss which tries to get the best of \\(L_1\\) and \\(L_2\\) loss.[1] \\[\\begin{equation} L_{Huber}(y,f(x)) = \\begin{cases}L_2(y,f(x)) &amp; |y-f(x)| \\leq \\delta \\\\ 2\\delta |y-f(x)| - \\delta^2 &amp; otherwise. \\end{cases} \\tag{3.2} \\end{equation}\\] In Figure 3.1 is a comparison of the three different losses discussed so far.[1] Figure 3.1: Comparison of different regression loss functions. These alternative loss criteria are more robust but make the fitting i.e. the minimization much more complex as they do not yield such simplifications like the \\(L_2\\) loss.[1] The next step in the journey of exploring boosting is to narrow down the argument spaces of Algorithm 1 (Forward Stagewise Additive Modeling) and to specify a subset of the general space of learning algorithms. This subset will be the space of Classification and Regression Tree (CART) models and in this case as the focus is on a regression task the space of regression trees. This choice is by no means arbitrary as in practice tree-based boosting algorithms have proven countless of times that they provide very robust and accurate models but still other learners might be chosen.[2] The next subsection will explore how one can actually fit such a forward stagewise additive model when using regression trees as the learner class. 3.2 General gradient tree boosting From now on there is the switch from the space of learning algorithms \\(\\mathcal{F}\\) to the space of regression trees \\(\\mathcal{T}\\). Such a regression tree can be formally expressed by: \\[\\begin{equation} t(x, \\gamma, R) = \\sum_{j=1}^J \\gamma_j I(x \\in R_j) \\quad \\text{for } t \\in \\mathcal{T} \\tag{3.3} \\end{equation}\\] With \\(R_j\\) being \\(J\\) distinct regions of the predictor space usually attained by recursive binary splitting. Moreover these regions correspond to the leafs of the tree and the number of leafs \\(J\\) or the depth of the trees are most often hyperparameters (not trained). The \\(\\gamma_j \\in \\mathbb{R}\\) are the predictions for a given x if x is contained in the region \\(R_j\\). While it is quite easy to get the \\(\\gamma_j\\) for the regions given, most often by computing \\(\\gamma_j = \\frac{1}{|\\{x \\in R_j\\}|} \\sum_{\\{x \\in R_j\\}} x\\) , it is a much harder problem to get good distinct regions. The above mentioned recursive binary splitting is an approximation to do this and works in a top down greedy fashion.[1] From now on we assume that we have an efficient way of fitting such trees to a metric outcome variable e.g. by recursive binary splitting. A nice graphical example of an additive model based on trees is displayed in the figure 3.2 below.[4] Figure 3.2: Example of an additive tree ensamble. Having now the new space \\(\\mathcal{T}\\) for the general boosting model (3.1) one can write down the optimization problem that has to be solved in each step of the forward stagewise process of fitting the model. \\[\\begin{equation} (\\gamma^{(k)},R^{(k)}) = argmin_{\\gamma,R} \\sum_{i=1}^N L(y_i, \\phi_{k-1}(x_i) + t(x_i,\\gamma,R)) \\tag{3.4} \\end{equation}\\] This can be estimated fast and quite straight forward if there is a simplification like the one seen for the \\(L_2\\) loss. But in the more general case of an arbitrary differentiable convex loss function like the Huber loss techniques from numerical optimization are needed to derive fast algorithms.[1] 3.2.1 Numerical optimization According to Algorithm 1 the goal in order to fit the boosting model is to minimize over the full loss of the training data \\(\\mathcal{D}\\) which is the sum over all observation losses. \\[ L(\\phi) = \\sum_{i=1}^N L(y_i, \\phi(x_i)) \\] And thus the \\(\\hat{\\phi}\\) additive boosting model we try to get is the following. \\[ \\hat{\\phi} = argmin_{\\phi} L(\\phi) \\] Now we basically follow the spirit of the general gradient descent algorithm for differentiable functions. In the general case we minimize a function \\(f(x)\\) by stepping iteratively along the direction of the steepest descent i.e. the negative gradient. The step length can then either be a constant small scalar or be determined by a line search. In the setting of the additive boosting model \\(\\phi\\) can be viewed as a vector of dimension \\(N\\) that contains the prediction according to \\(\\phi\\) of the corresponding observation i.e. \\(\\phi = (\\phi(x_1),...,\\phi(x_N))\\). So the loss function \\(L(\\phi)\\) corresponds to the \\(f(x)\\) in the general gradient descent algorithm. Numerical optimization, here gradient descent, then solves for \\(\\hat{\\phi}\\) by a sum of vectors of the same dimension as the \\(\\phi\\).[1] The result of the sum \\(\\phi_K\\) ((3.5)) can be viewed as the current proposal for the optimal \\(\\hat{\\phi}\\) after \\(K\\) optimization steps and each \\(h^{(k)}\\) is the proposed improvement step. \\[\\begin{equation} \\phi_K = \\sum_{k=0}^K h^{(k)} \\quad h^{(k)} \\in \\mathbb{R}^N \\tag{3.5} \\end{equation}\\] While \\(h^{(0)}\\) is just an initial guess the subsequent \\(h^{(k)}\\) are again the prediction vectors of the corresponding model out of \\(\\mathcal{T}\\) i.e. \\(h^{(k)}_{i} = t_k(x_i)\\) with \\(t \\in \\mathcal{T}\\). This means that each \\(\\phi_k = \\phi_{k-1} + h^{(k)}\\). The \\(h^{(k)}\\) are calculated via the gradient which finally comes into play. As mentioned above one minimizes the loss the most by going towards the direction of the steepest descent. For (3.5) follows from its additive formulation and defining \\(g^{(k)}\\) as the gradient of \\(L(\\phi_k)\\) evaluated for \\(\\phi_{k-1}\\) the update \\(h^{(k)} = -\\lambda_k g^{(k)}\\). As we assumed the loss to be differentiable we see that \\(g^{(k)}\\) is well defined. Here \\(\\lambda_k\\) is the usual step length for gradient descent methods. It is the solution of the line search \\(\\lambda_k = argmin_{\\lambda} L(\\phi_{k-1} - \\lambda g^{(k)})\\). This \\(\\lambda_k\\) almost exactly corresponds to the \\(\\beta_k\\) in Algorithm 1 although here the optimization is performed for every region of the tree separately.[1] With these insights it is clear that the tree predictions correspond to the negative gradient \\(-g^{(k)}\\). Of course the predictions are not independent as the prediction is constant for each leaf of the tree. So the new optimization proposed by numerical optimization via gradient boosting is given in (3.6) below. \\[\\begin{equation} (\\tilde{\\gamma}^{(k)},\\tilde{R}^{(k)}) = argmin_{\\gamma,R} \\sum_{i=1}^N [-g^{(k)}_{i} - t(x_i,\\gamma,R)] ^2 \\tag{3.6} \\end{equation}\\] In words this just means fitting a regression tree by least squares to the negative gradients that were evaluated with the current predictions. The solution regions will not exactly match the ones from (3.4) but should be very similar.[1] After having estimated the regions one estimates the parameters \\(\\gamma\\) by solving the line search (3.7). \\[\\begin{equation} \\tilde{\\gamma}^{(k)}_{j} = argmin_{\\gamma^{(k)}_{j}} \\sum_{x \\in R^{(k)}_{j}} L(y_i,\\phi_{k-1}(x_i) + \\gamma^{(k)}_{j}) \\tag{3.7} \\end{equation}\\] Putting all of this back together with Algorithm 1 results in Algorithm 2 that covers a general algorithm for tree-based gradient boosting. Algorithm 2: Tree-based gradient boosting [1] Initialize \\(\\phi_0(x)\\) as a singular node tree. For \\(k = 1\\) to \\(K\\) do: For \\(i = 1\\) to \\(N\\) compute: \\(g^{(k)}_{i} = \\bigg[\\frac{\\partial L(y_i, \\phi(x_i))}{\\partial \\phi(x_i)}\\bigg]_{\\phi = \\phi_{k-1}}\\) Fit a regression tree by least squares to the outcome vector \\(-g^{(k)}\\) in order to get the \\(J^{(k)}\\) distinct regions \\(\\tilde{R}^{(k)}_j\\). For each of these \\(J^{(k)}\\) regions perform a line search in order to compute the leaf predictions \\(\\tilde{\\gamma}^{(k)}_{j}\\) exactly like in (3.7). Set \\(\\phi_k(x) = \\phi_{k-1}(x) + t(x,\\tilde {\\gamma}^{(k)}_{j},\\tilde{R}^{(k)}_j)\\) with \\(t \\in \\mathcal{T}\\) The only unknowns in this algorithm are now the differentiable loss function and the hyperparameters like the \\(J^{(k)}\\) and the \\(K\\). While choices for the hyperparameters are discussed further below, the following table 3.1 displays the gradients for the losses discussed so far. Table 3.1: Gradients of the discussed losses [1] Loss Gradient \\(L_2\\): \\((y_i - \\phi(x_i))^2\\) \\(2(y_i - \\phi(x_i))\\) \\(L_1\\): \\(|y_i - \\phi(x_i)|\\) \\(sign(y_i - \\phi(x_i))\\) Huber loss (3.2) \\(y_i - \\phi(x_i)\\) for \\(|y_i - \\phi(x_i)| \\leq \\delta\\) \\(\\delta sign(y_i - \\phi(x_i))\\) otherwise, with \\(\\delta\\) quantile of \\(|y_i - \\phi(x_i)|\\) 3.2.2 Single tree depth The question which \\(J^{(k)}\\) should be used at each iteration is now shortly discussed. Basically using the tree depth two means allowing only the main effects and no interactions. A value of 3 already allows all two way interaction effects and so on. As one stacks these models additive and does not restrict oneself to a single one, the building of a large tree and then pruning it back at each iteration as the regular CART algorithms do would be a computational overkill. Instead it has proven to be sufficient and efficient in practice to set the values \\(J^{(k)}\\) to a constant \\(J \\approx 6\\).[1] Also decision stumps (\\(J = 2\\)) could be used but may require a lot more iterations. 3.2.3 Combat overfitting No learning algorithm could be fully covered without treating the good old problem of overfitting. In the setting of boosting the experienced eye could have spotted the problem of overfitting already in the definition of the additive model (3.1). There the number \\(K\\) of models that form the ensemble was introduced but was not discussed further till now. Of course one can arbitrarily fit or better say remember some given training data in order to minimize the loss with such an additive model by letting \\(K\\) be arbitrarily large. This comes from the fact that the loss reduces usually after each iteration over \\(K\\).[1] The easiest way to prevent overfitting is to have a validation set at hand which is disjoint from the training data. Having such a validation set at hand can be used to monitor the loss on the unseen data. In the case the loss would rise again on the validation data one can consider to stop the algorithm and to use the current iteration number for the final parameter \\(K\\). This approach is often called early stopping. Besides that there are methods that regularize the individual trees that are fitted in each iteration. Two of those will be discussed now. 3.2.3.1 Shrinkage Shrinkage basically refers to just introducing a learning rate \\(\\eta\\). This learning rate \\(\\eta\\) scales the contribution of the new model. In general the learning rate should be in \\((0,1]\\) but in practice it has been shown that rather small values like \\(\\eta &lt; 0.1\\) work very good.[1] As almost everything in life this does not come for free. A smaller learning rate usually comes with a computational cost as with lower \\(\\eta\\) a larger \\(K\\) is required. Those two hyperparameters represent a trade-off in a way. In practice it is advisable to use a small learning rate \\(\\eta\\) and adjust the \\(K\\) accordingly which in this case would mean to make the \\(K\\) large enough until one reaches an early stopping point. Still it is good to keep in mind that a \\(\\eta\\) that is too small can lead to an immense and unnecessary computational effort. All in all using shrinkage the update step in Algorithm 2 changes to the following. \\[\\begin{equation} \\phi_k(x) = \\phi_{k-1}(x) + \\eta * t(x,\\tilde {\\gamma}^{(k)}_{j},\\tilde{R}^{(k)}_j) \\tag{3.8} \\end{equation}\\] 3.2.3.2 Subsampling The other method to regularize the trees will be subsampling. There are two different kinds of subsampling. The first one is row-subsampling which basically means just using a random fraction of the training data in each iteration when fitting the new tree. Common values are \\(\\frac{1}{2}\\) but for a larger training set the value can be chosen to be smaller. This does not only help to prevent overfitting and thus achieving a better predictive performance but reduces also the computational effort in each iteration.[1] The approach is very similar to the dropout technique in the setting of deep neural networks. Moreover one can apply column-subsampling or feature-subsampling. Here only a fraction of the features or an explicit number of the features are used in each iteration. This is the exact same method and intention as the one applied in random forest models. Again the technique not only boosts performance on unseen data but also reduces the computational time.[4] Still it must be noted that by using one or both subsampling methods one introduces one or two additional hyperparameters to the model that have to be tuned. Having the Algorithm 2 for tree-based gradient boosting alongside some regularization techniques it is time to look at a very popular, efficient and powerful open source implementation. 3.3 XGBoost a highly efficient implementation The XGBoost algorithm is a highly scalable, efficient and successful implementation and optimization of Algorithm 2 introduced by Chen and Guestrin in 2016.[2] It has gained a lot of spotlight when it was integral for many winning submissions at kaggle machine learning challenges. In the following the most important tweaks that are proposed to Algorithm 2 are covered. 3.3.1 Regularized loss Instead of just minimizing a convex and differentiable loss \\(L\\) XGBoost minimizes the following regularized loss.[4] \\[\\begin{equation} \\begin{split} \\mathcal{L}(\\phi) = L(\\phi) + \\sum_{k=1}^K \\Omega(t_k) \\\\ \\text{where } \\Omega(t) = \\nu J + \\frac{1}{2} \\lambda ||\\gamma||^2 \\quad t \\in \\mathcal{T} \\end{split} \\tag{3.9} \\end{equation}\\] Here \\(J\\) and \\(\\gamma\\) again parameterize the regression trees \\(t \\in \\mathcal{T}\\) as defined in (3.3). As evident from the formula both hyperparameters \\(\\nu\\) and \\(\\lambda\\) favor when increased less complex models at each iteration. This is again a measure against overfitting. This regularized objective leads to a slightly modified version of the minimization problem (3.4) that has to be solved in each iteration. \\[\\begin{equation} (\\gamma^{(k)},R^{(k)}) = argmin_{\\gamma,R} \\sum_{i=1}^N L(y_i, \\phi_{k-1}(x_i) + t(x_i,\\gamma,R)) + \\Omega(t(x_i,\\gamma,R)) \\tag{3.10} \\end{equation}\\] Instead of the first order approach, that has been introduced in 3.2.1, XGBoost uses a second order approximation to further simplify the objective. This means that besides the first order gradient \\(g^{(k)}\\) of the loss function evaluated at \\(\\phi_{k-1}\\) also the second order gradient \\(z^{(k)}_i = \\bigg[\\frac{\\partial^2 L(y_i, \\phi(x_i))}{\\partial^2 \\phi(x_i)}\\bigg]_{\\phi = \\phi_{k-1}}\\) is used. By neglecting constants one reaches the approximate new objective below.[4] \\[\\begin{equation} \\begin{split} \\tilde{\\mathcal{L}}^{(k)} &amp; = \\sum_{i=1}^N [g^{(k)}_i t^{(k)}(x_i) + \\frac{1}{2} t^{(k)}(x_i)^2] + \\Omega(t^{(k)}) \\\\ &amp; = \\sum_{j=1}^J [(\\sum_{\\{i|x_i \\in R^{(k)}_j\\}} g^{(k)}_i) \\gamma^{(k)}_j + \\frac{1}{2} (\\sum_{\\{i|x_i \\in R^{(k)}_j\\}} z^{(k)}_i + \\lambda) (\\gamma^{(k)}_j)^2 ] + \\nu J \\end{split} \\tag{3.11} \\end{equation}\\] This representation is used as it can be decomposed by the \\(J\\) leafs of the tree. One can then define an scoring function for split finding that only depends on \\(g^{(k)}\\) and \\(z^{(k)}\\). 3.3.2 Shrinkage and subsampling As discussed above in 3.2.3 shrinkage and subsampling are great ways to regularize the model and prevent overfitting. XGBoost implements both shrinkage and subsampling. XGBoost enables the user to use column as well as row subsampling. The authors claim that in practice column subsampling has prevented overfitting more than row subsampling.[4] 3.3.3 Even more tweaks Besides the changes above the authors also implemented an effective approximate algorithm for split finding for the tree building step. A very nice attribute of this approximate procedure is that the algorithm is sparsity aware i.e. the processing of missing values or 0 values is very efficient. This is done via a learned default direction in each split. Moreover they used very efficient data structures to allow a lot of parallel processing.[4] It is written in C++ but has APIs in various languages like in R via the xgboost package.[5] 3.3.4 Hyperparameters overview As the tidymodels framework will be used in the applied part, the according names from the parsnip interface for tree-based boosting i.e. boost_tree are discussed below.[6] Table 3.2: XGBoost hyperparameters overview. Hyperparameter Notation above Meaning trees \\(K\\) Number of trees in the ensemble. tree_depth \\(max(J^{(k)})\\) Maximum depth of the trees. learn_rate \\(\\eta\\) Learning rate (shrinkage). min_n Minimum number of observations in terminal region \\(R^{(k)}_j\\). lambda \\(\\lambda\\) \\(L_2\\) regularization parameter on \\(\\gamma\\) as in (3.11) (default = 0). alpha \\(L_1\\) regularization parameter on \\(\\gamma\\) (default = 0). loss_reduction \\(\\nu\\) Minimal loss reduction for terminal partitions. (default = 0) mtry Proportion or number of columns for column subsampling. sample_size Proportion of observations for row subsampling. stop_iter Allowed number of rounds without improvement before early stopping. Note that the \\(L_1\\) penalization term would be added to the \\(\\Omega\\) term in the loss \\(\\mathcal{L}\\) of XGBoost. This closes the chapter on the theory of boosting methods with a focus on tree-based gradient boosting. The discussed tools will be put to the test in the subsequent sections where real world data will be analyzed with them. "],["eda.html", "Chapter 4 Explore the data 4.1 Burnout data", " Chapter 4 Explore the data Before one starts with the actual modeling it is crucial to get to know the data and to bring it to the correct format. This process of getting familiar with the data is well known as Exploratory Data Analysis (EDA). To do this many packages are used.[69, 10, 1113] The most important ones will be loaded below. library(tidyverse) # general data handling tools library(tidymodels) # data modeling and preprocessing # color palettes library(viridis) library(viridisLite) library(patchwork) # composing of ggplots 4.1 Burnout data The data is from the machine learning challenge HackerEarth Machine Learning Challenge: Are your employees burning out?. And can be downloaded here: https://www.kaggle.com/blurredmachine/are-your-employees-burning-out?select=train.csv # load the data burnout_data &lt;- read_csv(&quot;_data/burn_out_train.csv&quot;) # convert colnames to snake_case colnames(burnout_data) &lt;- tolower( stringr::str_replace_all( colnames(burnout_data), &quot; &quot;, &quot;_&quot; )) # omit missing values in the outcome variable burnout_data &lt;- burnout_data[!is.na(burnout_data$burn_rate),] 4.1.1 Train-test split set.seed(2) burnout_split &lt;- rsample::initial_split(burnout_data, prop = 0.80) burnout_train &lt;- rsample::training(burnout_split) burnout_test &lt;- rsample::testing(burnout_split) The training data set contains 17301 rows and 9 variables. The test data set contains 4325 observations and naturally also 9 variables. 4.1.2 Quick general overview First look at the classes of the variables. column class employee_id character date_of_joining Date gender character company_type character wfh_setup_available character designation numeric resource_allocation numeric mental_fatigue_score numeric burn_rate numeric A general visualization to detect missing values. # percentage of missing values in the training data set mean(rowSums(is.na(burnout_train)) &gt; 0) ## [1] 0.1407433 As we know that XGBoost can handle missing values we do not have to be concerned. Although one can think about imputation. But more on that later. 4.1.3 What about the outcome variable? burn_rate: For each employee telling the rate of burnout should be in \\([0,1]\\). The greater the score the worse the burnout (0 means no burnout at all). As the variable is continuous we have a regression task. Yet it has bounds which has to be treated with when predicting. The five point summary below shows that the full range is covered and no invalid values are in the data. ## Min. 1st Qu. Median Mean 3rd Qu. Max. ## 0.0000 0.3100 0.4500 0.4513 0.5900 1.0000 Now the distribution of the outcome. The distribution of the outcome is very much symmetrical and bell shaped around 0.5 and the whole defined region \\([0,1]\\) is quite well covered. 4.1.4 Distribution and main effects of the predictors 4.1.4.1 Employee ID employee_id is just an ID variable and thus is not useful for any prediction model. But one has to check for duplicates. # TRUE if there are NO duplicates burnout_train %&gt;% group_by(employee_id) %&gt;% summarise(n = n()) %&gt;% nrow() == nrow(burnout_train) ## [1] TRUE Thus there are no duplicates which is good. 4.1.4.2 Date of joining date_of_joining is the date the employee has joined the company. Thus a continuous variable that most likely needs some kind of feature engineering. Although there is a lot of variation no major trends in hirings are visible from this plot. Overall the variable seems to be quite equally distributed over the year 2008. In its raw form the variable date_of_joining seems not to have a notable main effect on the outcome variable. Nevertheless the feature will be used in the model and as tree-based models have an in-built feature selection one can see after the fitting if the feature was helpful overall. The feature will not be included just as an integer (the default format how Dates are represented) but rather some more features like weekday or month will be extracted from the raw variable further down the road. 4.1.4.3 Gender gender represents the gender of the employee. Definitely a categorical variable. # have a look at the discrete distribution summary(factor(burnout_train$gender)) ## Female Male ## 9101 8200 The two classes are well balanced. Now a look at the main effect of the feature. For both classes the distributions are very similar and symmetrical. It seems like the male employees have overall a slightly higher risk of having a higher burn score i.e. a burnout. 4.1.4.4 Company type company_type is a binary categorical variable that indicates whether the company is a service or product company. # have a look at the discrete distribution summary(factor(burnout_train$company_type)) ## Product Service ## 6018 11283 In this case the classes are not fully balanced but each class is still well represented. Now a look at the main effect of the feature. For both classes the distributions are almost identical and symmetrical. From an univariate point of view no notable main effect is visible from these visualizations. 4.1.4.5 Work from home setup wfh_setup_available indicates whether a working from home setup is available for the employee. So this is again a binary variable. # have a look at the discrete distribution summary(factor(burnout_train$wfh_setup_available)) ## No Yes ## 7929 9372 The two classes are well balanced. Now a look at the main effect of the feature. Again both distributions are quite similar i.e. bell shaped and symmetrical. Here quite a main effect is visible. A work from home setup most likely has a positive influence on the wellbeing and thus lowers the risk for a high burn rate. 4.1.4.6 Designation designation A rate within \\([0,5]\\) that represents the designation in the company for the employee. High values indicate a greater amount of designation. # unique values of the feature unique(burnout_train$designation) ## [1] 2 1 3 0 4 5 As the feature has a natural ordering this variable will be treated as an ordinal one i.e. be encoded with the integers and not by one-hot-encoding. Here clearly the more extreme levels of designation are less represented in the data. This makes total sense w.r.t. the meaning of the variable. A strong main effect is visible in the plot. The plot also further strengthens the hypothesis that we should treat the feature as ordinal. A higher level of designation seems to have an influence on the risk of having a burnout. For example employees from the training data set with a level of designation below 3 never even achieved a maximal burn score of one. 4.1.4.7 Resource allocation resource_allocation A rate within \\([1,10]\\) that represents the resource allocation to the employee. High values indicate more resources allocated to the employee. # unique values of the feature unique(burnout_train$resource_allocation) ## [1] 3 1 7 4 6 5 2 NA 8 10 9 Here again the question is whether one should encode this variable as a categorical or an ordinal categorical feature. In this case as there are quite some levels and again a natural ordering the variable will be encoded as a continuous integer score. A similar behavior as the one of the previous variable is visible. But here there are some missing values (NAs). A strong main effect is visible in the plot. The plot again further strengthens the hypothesis that we should treat this feature as ordinal. A higher amount of resources assigned to an employee seems to have a positive influence on the risk of having a burnout. The missing values do not seem to have some structure as they replicate the base distribution of the outcome variable. 4.1.4.8 Mental fatigue score mental_fatigue_score is the level of mental fatigue the employee is facing. # number of unique values length(unique(burnout_train$mental_fatigue_score)) ## [1] 102 This variable will without a question be treated in a continuous way. Although there is a very slight skew towards a higher mental fatigue score the overall distribution is still more or less bell shaped and quite symmetrical. Moreover the whole allowed range is covered and the bounds are not violated. Next the main effect of the variable. This scatterplot shows drastic results! The mental fatigue score has an almost perfect linear relationship with the outcome variable. This is also underlined by the very high pearson correlation. This indicates that mental fatigue score will be a most important predictor. If a communication with the data collector would be possible it would be important to check whether the two scores have common confounding variables as then one would have to question the practical usability of this predictor. This comes from the fact that no model would be needed if it was as hard to collect the data about the predictors as the outcome data. Moreover there are 1555 missing values in the feature so for those the model has to rely on the other maybe more weak predictors. It should be noted that when evaluating the final model one should consider to compare its performance to a trivial model (like a single intercept model). When constructing such a trivial model one could and maybe should also use this variable (when available) to get a trivial prediction by scaling the mental_fatigue_score feature by a simple scalar. 4.1.5 Relationships between the predictors 4.1.5.1 Date of joining vs. the others No major relationship can be detected here. 4.1.5.2 Gender vs. the remaining Contingency tables for the comparison of two binary features: # Gender vs Company type table(burnout_train$gender, burnout_train$company_type) ## ## Product Service ## Female 3097 6004 ## Male 2921 5279 No huge tendency visible. # Gender vs Work from home setup table(burnout_train$gender, burnout_train$wfh_setup_available) ## ## No Yes ## Female 3835 5266 ## Male 4094 4106 Slightly more women have a work from home setup available. Now the ordinal variables: It has to be noted again that female and male emplyees are almost equally represented in the data set. Thus one can see from the above plot that the biggest difference in distribution is for the levels 1 and 4 with opposing effects. While male employees more often have a quite high designation of 4 females are the much more frequent employee with designation level 1. Here a major shift in distribution is visible towards men getting more resources allocated to them. This reflects the society that still promotes men much more often to high paying jobs that most often come with resource responsibility. Now the mental fatigue score: This is of course very similar to the main effect of the gender variable as the outcome and the feature mental_fatigue_score are highly linearly correlated. 4.1.5.3 Company type vs. the remaining # Company type vs Work from home setup table(burnout_train$company_type, burnout_train$wfh_setup_available) ## ## No Yes ## Product 2764 3254 ## Service 5165 6118 No notable trend. No trend here either. The same verdict as above. 4.1.5.4 Work from home setup vs. the remaining A work from home setup is way more often available for employees with a lower designation (\\(\\leq 2\\)). The same structure as in the previous comparison is visible here again. Employees with a lower amount of resources allocated to them have more often a work from home setup available. This could be due to the fewer responsibilities they have in the business. Again this is of course very similar to the main effect of the wfh_setup_available variable as the outcome and the feature mental_fatigue_score are highly linearly correlated. 4.1.5.5 Designation vs the remaining Here a strong quite linear relationship is visible. This is sensible as often more resource responsibility is given to employees with high designation. The last two relationships will be omitted here as both for the variable designation as well as for resource_allocation the comparison with mental_fatigue_score will be very similar to the main effect of the two variables. This comes again from the high correlation of the latter with the outcome. 4.1.6 Some feature engineering The only variable that allows for some feature engineering is the date of joining one. One can try to extract some underlying patterns and see if an effect on the outcome is visible. First extract the day of the week: No main effect is visible here. Again no main effect is visible. Nevertheless one can include those two variables into the model because as mentioned before tree-based models actually perform a feature selection at each split. 4.1.7 Create recipe one for lm (dummify categorical features) and one for the tree based approaches # ames_rec &lt;- # recipe(Sale_Price ~ Neighborhood + Gr_Liv_Area + Year_Built + Bldg_Type + # Latitude + Longitude, data = ames_train) %&gt;% # step_log(Gr_Liv_Area, base = 10) %&gt;% # step_other(Neighborhood, threshold = 0.01) %&gt;% # step_dummy(all_nominal()) %&gt;% # step_interact( ~ Gr_Liv_Area:starts_with(&quot;Bldg_Type_&quot;) ) %&gt;% # step_ns(Latitude, Longitude, deg_free = 20) "],["modeling.html", "Chapter 5 Lets boost the models", " Chapter 5 Lets boost the models boooooooooooooooooooooost them (gif here?) Cite additional model packages.[14] library(xgboost) ## Warning: package &#39;xgboost&#39; was built under R version 4.0.3 ## ## Attaching package: &#39;xgboost&#39; ## The following object is masked from &#39;package:dplyr&#39;: ## ## slice library(ranger) To do register parallel backend create models and workflows create resampling objects choose tuning method (racing/iterative or grid search) tune models and select best ones compare final models to test set save final model cite [15] library(doParallel) # Create a cluster object and then register: cl &lt;- makePSOCKcluster(2) registerDoParallel(cl) # Put at the end: stopCluster(cl) for 2. set engine specific arguments in the set_engine() function use tune() for parameters that should be tuned (optional tune(id_name)) # Models: lm_model &lt;- linear_reg() %&gt;% set_engine(&quot;lm&quot;) rf_model &lt;- rand_forest(trees = 1000) %&gt;% set_engine(&quot;ranger&quot;) %&gt;% set_mode(&quot;regression&quot;) boost_model &lt;- boost_tree() %&gt;% set_engine(&quot;xgboost&quot;) %&gt;% set_mode(&quot;regression&quot;) # Workflows: # lm_wflow &lt;- # workflow() %&gt;% # add_model(lm_model) %&gt;% # add_recipe() for 3. # Create Resampling objects # set.seed(2) # ames_folds &lt;- vfold_cv(ames_train, v = 10) for fitting resampling objects without tuning: # set.seed(2) # rf_res &lt;- rf_wflow %&gt;% # fit_resamples(resamples = ames_folds) # # collect the metrics during resampling with # collect_metrics() for 4. and following # show the parameters to be tuned with the range # dials::parameters() # get and modify the parameters to be tuned with: # name() # wflow_param %&gt;% pull_dials_object(&quot;threshold&quot;) # parameters(ames_rec) %&gt;% # update(threshold = threshold(c(0.8, 1.0))) # finalize for data dependent params # updated_param &lt;- # workflow() %&gt;% # add_model(rf_spec) %&gt;% # add_recipe(pca_rec) %&gt;% # parameters() %&gt;% # finalize(ames_train) grids: grid_regular(levels = c(hidden_units = 3, penalty = 2, epochs = 2)) space filling: grid_latin_hypercube(size = 15, original = FALSE) then tune_grid() function instead of fit_resamples roc_res &lt;- metric_set(roc_auc) set.seed(99) mlp_reg_tune &lt;- mlp_wflow %&gt;% tune_grid( cell_folds, grid = mlp_param %&gt;% grid_regular(levels = 3), metrics = roc_res ) autoplot(mlp_reg_tune) + theme(legend.position = &quot;top&quot;) show_best(mlp_reg_tune) # for spacefilling mlp_sfd_tune &lt;- mlp_wflow %&gt;% tune_grid( cell_folds, grid = 20, # Pass in the parameter object to use the appropriate range: param_info = mlp_param, metrics = roc_res ) select_best() logistic_param &lt;- tibble( num_comp = 0, epochs = 125, hidden_units = 1, penalty = 1 ) final_mlp_wflow &lt;- mlp_wflow %&gt;% finalize_workflow(logistic_param) final_mlp_fit &lt;- final_mlp_wflow %&gt;% fit(cells) Racing: library(finetune) # if used to be cited set.seed(99) mlp_sfd_race &lt;- mlp_wflow %&gt;% tune_race_anova( cell_folds, grid = 20, param_info = mlp_param, metrics = roc_res, control = control_race(verbose_elim = TRUE) ) Here no iterative search as big parameter space, could be done after grid search or for single parameters. (If then Simulated Annealing) "],["conclusion.html", "Chapter 6 Conclusion", " Chapter 6 Conclusion Lets wrap it up! "],["references.html", "Chapter 7 References", " Chapter 7 References [1] Hastie, T., Tibshirani, R. and Friedman, J. (2009). The elements of statistical learning (12th printing). Springer New York. [2] Boehmke, B. and Greenwell, B. (2019). Hands-on machine learning with r. [3] Wolf, M. M. (2020). Lecture notes in mathematical foundations of supervised learning. [4] Chen, T. and Guestrin, C. (2016). XGBoost: A scalable tree boosting system. CoRR abs/1603.02754. [5] Chen, T., He, T., Benesty, M., Khotilovich, V., Tang, Y., Cho, H., Chen, K., Mitchell, R., Cano, I., Zhou, T., Li, M., Xie, J., Lin, M., Geng, Y. and Li, Y. (2021). Xgboost: Extreme gradient boosting. [6] Kuhn, M. and Wickham, H. (2020). Tidymodels: A collection of packages for modeling and machine learning using tidyverse principles. [7] Wickham, H., Averick, M., Bryan, J., Chang, W., McGowan, L. D., FranÃ§ois, R., Grolemund, G., Hayes, A., Henry, L., Hester, J., Kuhn, M., Pedersen, T. L., Miller, E., Bache, S. M., MÃ¼ller, K., Ooms, J., Robinson, D., Seidel, D. P., Spinu, V., Takahashi, K., Vaughan, D., Wilke, C., Woo, K. and Yutani, H. (2019). Welcome to the tidyverse. Journal of Open Source Software 4 1686. [8] Garnier, S. (2018). Viridis: Default color maps from matplotlib. [9] Wilke, C. O. (2020). Ggtext: Improved text rendering support for ggplot2. [10] Garnier, S. (2018). viridisLite: Default color maps from matplotlib (lite version). [11] Pedersen, T. L. (2020). Patchwork: The composer of plots. [12] Tierney, N. (2017). Visdat: Visualising whole data frames. JOSS 2 355. [13] Grolemund, G. and Wickham, H. (2011). Dates and times made easy with lubridate. Journal of Statistical Software 40 125. [14] Wright, M. N. and Ziegler, A. (2017). ranger: A fast implementation of random forests for high dimensional data in C++ and R. Journal of Statistical Software 77 17. [15] Corporation, M. and Weston, S. (2019). doParallel: Foreach parallel adaptor for the parallel package. [16] Zhu, H. (2021). kableExtra: Construct complex table with kable and pipe syntax. "]]
